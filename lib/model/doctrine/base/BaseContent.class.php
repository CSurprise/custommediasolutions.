<?php

/**
 * BaseContent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property string $title
 * @property string $page_title
 * @property string $meta_keywords
 * @property string $meta_description
 * @property string $content
 * @property string $url_slug
 * @property string $layout
 * @property string $stylesheets
 * @property string $javascripts
 * @property integer $published
 * @property Websites $Websites
 * 
 * @method integer   getId()               Returns the current record's "id" value
 * @method timestamp getCreatedAt()        Returns the current record's "created_at" value
 * @method timestamp getUpdatedAt()        Returns the current record's "updated_at" value
 * @method string    getTitle()            Returns the current record's "title" value
 * @method string    getPageTitle()        Returns the current record's "page_title" value
 * @method string    getMetaKeywords()     Returns the current record's "meta_keywords" value
 * @method string    getMetaDescription()  Returns the current record's "meta_description" value
 * @method string    getContent()          Returns the current record's "content" value
 * @method string    getUrlSlug()          Returns the current record's "url_slug" value
 * @method string    getLayout()           Returns the current record's "layout" value
 * @method string    getStylesheets()      Returns the current record's "stylesheets" value
 * @method string    getJavascripts()      Returns the current record's "javascripts" value
 * @method integer   getPublished()        Returns the current record's "published" value
 * @method Websites  getWebsites()         Returns the current record's "Websites" value
 * @method Content   setId()               Sets the current record's "id" value
 * @method Content   setCreatedAt()        Sets the current record's "created_at" value
 * @method Content   setUpdatedAt()        Sets the current record's "updated_at" value
 * @method Content   setTitle()            Sets the current record's "title" value
 * @method Content   setPageTitle()        Sets the current record's "page_title" value
 * @method Content   setMetaKeywords()     Sets the current record's "meta_keywords" value
 * @method Content   setMetaDescription()  Sets the current record's "meta_description" value
 * @method Content   setContent()          Sets the current record's "content" value
 * @method Content   setUrlSlug()          Sets the current record's "url_slug" value
 * @method Content   setLayout()           Sets the current record's "layout" value
 * @method Content   setStylesheets()      Sets the current record's "stylesheets" value
 * @method Content   setJavascripts()      Sets the current record's "javascripts" value
 * @method Content   setPublished()        Sets the current record's "published" value
 * @method Content   setWebsites()         Sets the current record's "Websites" value
 * 
 * @package    models
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseContent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('content');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('page_title', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('meta_keywords', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('meta_description', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('content', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('url_slug', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('layout', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('stylesheets', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('javascripts', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('published', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Websites', array(
             'local' => 'id',
             'foreign' => 'default_content_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}